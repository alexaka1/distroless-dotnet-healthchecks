name: Release images
on:
  push:
    branches:
      - main
      - beta
concurrency: ${{ github.workflow }}-${{ github.ref }}-release
permissions: { }
env:
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
jobs:
  changesets:
    name: Version packages
    uses: ./.github/workflows/version.yml
    permissions:
      pull-requests: write
      contents: write
      issues: read
      id-token: write
  check-release:
    name: Check if release is needed of '${{ matrix.package }}' package
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
    defaults:
      run:
        shell: bash
    outputs:
      can-release: ${{ ! fromJSON(steps.check-image.outputs.exists) }}
      semver: ${{ steps.version.outputs.semver }}
      major: ${{ steps.version.outputs.major }}
      minor: ${{ steps.version.outputs.minor }}
      patch: ${{ steps.version.outputs.patch }}
      tag: ${{ steps.version.outputs.tag }}
    strategy:
      fail-fast: false
      matrix:
        package:
          - src/Distroless.HealthChecks
        include:
          - package: src/Distroless.HealthChecks
            image: ${{ github.repository_owner }}/distroless-dotnet-healthchecks
            artifact: Distroless.HealthChecks
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false
      - name: Get version of package
        id: version
        run: |
          VERSION=$(jq -r '.version' "${{ matrix.package }}/package.json")
          echo "semver=$VERSION" >> "$GITHUB_OUTPUT"
          if [[ $VERSION =~ ^([0-9]+)\.([0-9]+)\.([0-9]+)(-.*)?$ ]]; then
            echo "major=${BASH_REMATCH[1]}" >> "$GITHUB_OUTPUT"
            echo "minor=${BASH_REMATCH[2]}" >> "$GITHUB_OUTPUT"
            echo "patch=${BASH_REMATCH[3]}" >> "$GITHUB_OUTPUT"
            tag="${BASH_REMATCH[4]}"
          
            # If tag is null, set it to an empty string
            tag="${tag:-}"
            echo "tag=$tag" >> "$GITHUB_OUTPUT"
          fi
      - name: Login to GitHub Container Registry
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3.5.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Check for existing image
        id: check-image
        run: |
          exists=$(docker manifest inspect ghcr.io/${{ matrix.image }}:${{ steps.version.outputs.semver }} > /dev/null 2>&1 && echo true || echo false)
          echo "exists=$exists" >> "$GITHUB_OUTPUT"

      - name: Package does not exist
        if: ${{ ! fromJSON(steps.check-image.outputs.exists) }}
        run: |
          echo "see https://github.com/orgs/community/discussions/37883 for more info why this step is needed"
          echo "should deploy" > ${{ matrix.artifact }}.md
      - name: "Upload if package should be released"
        if: ${{ ! fromJSON(steps.check-image.outputs.exists) }}
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: check-release-${{ matrix.artifact }}
          path: ${{ matrix.artifact }}.md
          retention-days: 1
  should-release:
    name: Check if at least one package should be released
    runs-on: ubuntu-latest
    needs:
      - check-release
    outputs:
      should-release: ${{ steps.check-release.outputs.should-release }}
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          disable-sudo: true
          egress-policy: audit
      - name: Download artifact
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          pattern: check-release-*
          path: /tmp/check-release
          merge-multiple: true
      - name: Check if at least one package should be released
        id: check-release
        run: |
          should_release=false
          for file in /tmp/check-release/*.md; do
            if [[ -f "$file" ]]; then
              should_release=true
              break
            fi
          done
          echo "should-release=$should_release" >> "$GITHUB_OUTPUT"
  release-docker:
    name: Release docker images
    if: ${{ needs.should-release.outputs.should-release }} # this is a github limitation https://github.com/orgs/community/discussions/37883
    uses: ./.github/workflows/release-docker.yml
    with:
      package: ${{ matrix.package }}
      image: ${{ matrix.image }}
      target: ${{ matrix.target }}
      platforms: ${{ matrix.platforms }}
      readme: ${{ matrix.readme }}
      context: ${{ matrix.context }}
      run: ${{ fromJSON(needs.check-release.outputs.can-release) }}
      semver: ${{ needs.check-release.outputs.semver }}
      major: ${{ needs.check-release.outputs.major }}
      minor: ${{ needs.check-release.outputs.minor }}
      tag: ${{ needs.check-release.outputs.tag }}
      environment: ${{ github.ref == 'refs/heads/beta' && 'Beta' || 'Production' }}
    secrets:
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
    needs:
      - check-release
      - should-release
    permissions:
      contents: write # for tagging and gh release
      packages: write # for ghcr.io
      attestations: write # for attestations
      id-token: write # for tag signing
    strategy:
      fail-fast: false
      matrix:
        package:
          - src/Distroless.HealthChecks
        include:
          - package: src/Distroless.HealthChecks
            image: ${{ github.repository_owner }}/distroless-dotnet-healthchecks
            target: binary
            platforms: linux/amd64,linux/amd64/v2,linux/amd64/v3,linux/arm64
            readme: ./README.md
            context: "."
