name: Release images
on:
  push:
    branches:
      - main
      - beta
concurrency: ${{ github.workflow }}-${{ github.ref }}-release
permissions: { }
env:
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
jobs:
  changesets:
    name: Version packages
    uses: ./.github/workflows/version.yml
    permissions:
      pull-requests: write
      contents: write
      issues: read
      id-token: write
  check-release:
    name: Check if release is needed of '${{ matrix.package }}' package
    runs-on: ubuntu-24.04-arm
    permissions:
      contents: read
      packages: read
    defaults:
      run:
        shell: bash
    outputs:
      can-release: ${{ ! fromJSON(steps.check-image.outputs.exists) }}
      semver: ${{ steps.version.outputs.semver }}
      major: ${{ steps.version.outputs.major }}
      minor: ${{ steps.version.outputs.minor }}
      patch: ${{ steps.version.outputs.patch }}
      tag: ${{ steps.version.outputs.tag }}
    strategy:
      fail-fast: false
      matrix:
        package:
          - src/Distroless.HealthChecks
        include:
          - package: src/Distroless.HealthChecks
            image: ${{ github.repository_owner }}/distroless-dotnet-healthchecks
            artifact: Distroless.HealthChecks
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          egress-policy: audit
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false
      - name: Get version of package
        id: version
        run: |
          VERSION=$(jq -r '.version' "${{ matrix.package }}/package.json")
          echo "semver=$VERSION" >> "$GITHUB_OUTPUT"
          if [[ $VERSION =~ ^([0-9]+)\.([0-9]+)\.([0-9]+)(-.*)?$ ]]; then
            echo "major=${BASH_REMATCH[1]}" >> "$GITHUB_OUTPUT"
            echo "minor=${BASH_REMATCH[2]}" >> "$GITHUB_OUTPUT"
            echo "patch=${BASH_REMATCH[3]}" >> "$GITHUB_OUTPUT"
            tag="${BASH_REMATCH[4]}"
          
            # If tag is null, set it to an empty string
            tag="${tag:-}"
            echo "tag=$tag" >> "$GITHUB_OUTPUT"
          fi
      - name: Login to GitHub Container Registry
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef # v3.6.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Check for existing image
        id: check-image
        run: |
          exists=$(docker manifest inspect ghcr.io/${{ matrix.image }}:${{ steps.version.outputs.semver }} > /dev/null 2>&1 && echo true || echo false)
          echo "exists=$exists" >> "$GITHUB_OUTPUT"

      - name: Package does not exist
        if: ${{ ! fromJSON(steps.check-image.outputs.exists) }}
        run: |
          echo "see https://github.com/orgs/community/discussions/37883 for more info why this step is needed"
          echo "should deploy" > ${{ matrix.artifact }}.md
      - name: "Upload if package should be released"
        if: ${{ ! fromJSON(steps.check-image.outputs.exists) }}
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: check-release-${{ matrix.artifact }}
          path: ${{ matrix.artifact }}.md
          retention-days: 1
  should-release:
    name: Check if at least one package should be released
    runs-on: ubuntu-24.04-arm
    needs:
      - check-release
    outputs:
      should-release: ${{ steps.check-release.outputs.should-release }}
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          disable-sudo: true
          egress-policy: audit
      - name: Download artifact
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          pattern: check-release-*
          path: /tmp/check-release
          merge-multiple: true
      - name: Check if at least one package should be released
        id: check-release
        run: |
          should_release=false
          for file in /tmp/check-release/*.md; do
            if [[ -f "$file" ]]; then
              should_release=true
              break
            fi
          done
          echo "should-release=$should_release" >> "$GITHUB_OUTPUT"
  release-docker:
    name: Publish docker images
    if: ${{ needs.should-release.outputs.should-release }} # this is a github limitation https://github.com/orgs/community/discussions/37883
    uses: ./.github/workflows/release-docker.yml
    with:
      package: ${{ matrix.package }}
      image: ${{ matrix.image }}
      target: ${{ matrix.target }}
      platforms: ${{ matrix.platforms }}
      base-image-type: ${{ matrix.base-image-type }}
      readme: ${{ matrix.readme }}
      context: ${{ matrix.context }}
      run: ${{ fromJSON(needs.check-release.outputs.can-release) }}
      semver: ${{ needs.check-release.outputs.semver }}
      major: ${{ needs.check-release.outputs.major }}
      minor: ${{ needs.check-release.outputs.minor }}
      tag: ${{ needs.check-release.outputs.tag }}
      tag-suffix: ${{ matrix.tag-suffix }}
      environment: ${{ github.ref == 'refs/heads/beta' && 'Beta' || 'Production' }}
    secrets:
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
    needs:
      - check-release
      - should-release
    permissions:
      contents: read # no tagging/release here; handled in fan-in job
      packages: write # for ghcr.io
      attestations: write # for attestations
      id-token: write # for attestations
      pull-requests: write # for test reports
    strategy:
      fail-fast: false
      matrix:
        package:
          - src/Distroless.HealthChecks
        base-image-type:
          - ubuntu-chiseled
          - alpine
        include:
          - base-image-type: alpine
            tag-suffix: '-alpine'
          - package: src/Distroless.HealthChecks
            image: ${{ github.repository_owner }}/distroless-dotnet-healthchecks
            target: binary
            platforms: linux/amd64,linux/arm64
            readme: ./README.md
            context: "."
  release-github:
    name: Create GitHub release
    if: ${{ needs.should-release.outputs.should-release }}
    needs:
      - check-release
      - should-release
      - release-docker
    # fails on ubuntu-latest-arm as of 2025-08-27
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/beta' && 'Beta' || 'Production' }}
    permissions:
      contents: write # tag + release
      id-token: write  # for tag signing (gitsign)
    strategy:
      fail-fast: false
      matrix:
        package:
          - src/Distroless.HealthChecks
        include:
          - package: src/Distroless.HealthChecks
            image: ${{ github.repository_owner }}/distroless-dotnet-healthchecks
            readme: ./README.md
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          egress-policy: audit
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: true
      - uses: chainguard-dev/actions/setup-gitsign@94249a4828defae94ef3eaeaafaff2f95f1b446f
      - name: Create changelog for release
        id: changelog
        run: |
          input_file="${{ matrix.package }}/CHANGELOG.md"
          output_file="/tmp/changes.md"
          # Find the line number of the first version heading
          start_line=$(grep -nE '^## [0-9]+\.[0-9]+\.[0-9]' "$input_file" | head -n 1 | cut -d: -f1)

          # Find the line number of the next version heading, if it exists
          end_line=$(grep -nE '^## [0-9]+\.[0-9]+\.[0-9]' "$input_file" | sed -n '2p' | cut -d: -f1)

          if [ -z "$end_line" ]; then
            # If there is no next version, extract till the end of the file
            sed -n "${start_line},\$p" "$input_file" > "$output_file"
          else
            # Extract only the section for the uppermost version
            sed -n "${start_line},$(($end_line-1))p" "$input_file" > "$output_file"
          fi
          echo "changes=$output_file" >> "$GITHUB_OUTPUT"
          echo "prerelease=false" >> "$GITHUB_OUTPUT"
          if [ -f ".changeset/pre.json" ]; then
            echo "prerelease=true" >> "$GITHUB_OUTPUT"
          fi
      - name: Download merged artifacts
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          pattern: merged-*
          path: /tmp/merged
          # Keep artifacts in separate subfolders named by artifact
          merge-multiple: false
      - name: Append digests and tags to changelog
        run: |
          set -euo pipefail
          changes="${{ steps.changelog.outputs.changes }}"
          shopt -s nullglob
          found_any=false
          for dir in /tmp/merged/merged-*; do
            [ -d "$dir" ] || continue
            found_any=true
            variant=$(cat "$dir/variant.txt" 2>/dev/null || echo "variant")
            echo "" >> "$changes"
            echo "### Digest ($variant)" >> "$changes"
            echo "" >> "$changes"
            if [ -f "$dir/manifest-digest.txt" ]; then
              echo "\`$(cat "$dir/manifest-digest.txt")\`" >> "$changes"
            else
              echo "(missing)" >> "$changes"
            fi
            echo "" >> "$changes"
            echo "### Tags ($variant)" >> "$changes"
            echo "" >> "$changes"
            if [ -f "$dir/metadata.json" ]; then
              jq -r '.tags[]' "$dir/metadata.json" | awk '{print "- " $0 }' >> "$changes" || true
            else
              echo "(none)" >> "$changes"
            fi
          done
          if [ "$found_any" = false ]; then
            echo "No merged artifacts found for ${{ matrix.image }}" >&2
            exit 1
          fi
      - name: Tag release
        run: |
          git tag -s "${{ matrix.image }}-${{ needs.check-release.outputs.semver }}" -m "Release ${{ matrix.image }}:${{ needs.check-release.outputs.semver }}"
          git push origin "${{ matrix.image }}-${{ needs.check-release.outputs.semver }}"
      - name: Create GitHub release
        uses: softprops/action-gh-release@6da8fa9354ddfdc4aeace5fc48d7f679b5214090 # v2.4.1
        with:
          body_path: ${{ steps.changelog.outputs.changes }}
          body: Oh no, it looks like the change-notes were not generated correctly by the action.
          draft: false
          prerelease: ${{ fromJSON(steps.changelog.outputs.prerelease) }}
          generate_release_notes: true
          append_body: true
          tag_name: "${{ matrix.image }}-${{ needs.check-release.outputs.semver }}"
          target_commitish: ${{ github.sha }}
          name: ${{ matrix.image }}:${{ needs.check-release.outputs.semver }}
      - name: Update repo description
        if: ${{ ! fromJSON(steps.changelog.outputs.prerelease) }}
        uses: peter-evans/dockerhub-description@1b9a80c056b620d92cedb9d9b5a223409c68ddfa # v5.0.0
        with:
          username: ${{ github.repository_owner }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          repository: ${{ matrix.image }}
          readme-filepath: ${{ matrix.readme }}
