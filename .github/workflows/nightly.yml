name: Nightly build
on:
  # Nightly via cron
  schedule:
    - cron: '0 0 * * *'
  # Allow running on-demand from the GitHub UI
  workflow_dispatch:
    inputs:
      force:
        description: Force run even if current commit already published
        required: false
        type: boolean
        default: false

concurrency:
  group: ${{ github.workflow }}

permissions:
  contents: read

env:
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  IMAGE_NAME: ${{ github.repository_owner }}/nightly/distroless-dotnet-healthchecks
  branch: main

jobs:
  check-run:
    outputs:
      should-run: ${{ steps.check_commit.outputs.should-run }}
    permissions:
      contents: read
      packages: read
    runs-on: ubuntu-latest
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          disable-sudo: true
          egress-policy: audit
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          ref: ${{ env.branch }}
          persist-credentials: false
      - name: Check if last commit had a run
        id: check_commit
        continue-on-error: true
        run: |
          set -euo pipefail
          # Always allow manual runs from the UI for testing
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "Manual dispatch detected; allowing run."
            echo "should-run=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          CURRENT_HASH=$(git rev-parse HEAD)
          IMAGE_NAME=ghcr.io/${{ env.IMAGE_NAME }}:nightly
          if ! docker pull -q "$IMAGE_NAME" >/dev/null 2>&1; then
            echo "::notice::Image $IMAGE_NAME not found in registry. Triggering build."
            echo "should-run=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          IMAGE_HASH=$(docker inspect \
          --format '{{ index .Config.Labels "org.opencontainers.image.revision" }}' \
          "$IMAGE_NAME" 2>/dev/null || echo "")
          
          if [[ -z "$IMAGE_HASH" ]]; then
            echo "Image $IMAGE_NAME has no org.opencontainers.image.revision label. Triggering build."
            echo "should-run=true" >> $GITHUB_OUTPUT
            exit 0
          fi  
          echo "Current Git hash: $CURRENT_HASH"
          echo "Image hash:       $IMAGE_HASH"
            
          if [[ "$IMAGE_HASH" == "$CURRENT_HASH" ]]; then
            echo "::notice::This commit ($CURRENT_HASH) has already been published. Skipping."
            echo "should-run=false" >> $GITHUB_OUTPUT
          else
            echo "Image does not match current commit. Safe to build/push."
            echo "should-run=true" >> $GITHUB_OUTPUT
          fi
  build-native:
    name: Build native (${{ matrix.variant }} / ${{ matrix.platform }})
    needs: [ check-run ]
    # Run when check-run allows, or always for manual dispatch
    if: needs.check-run.outputs.should-run == 'true'
    environment: Nightly
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    strategy:
      fail-fast: false
      matrix:
        variant: [ ubuntu-chiseled, alpine ]
        platform: [ linux/amd64, linux/arm64 ]
    runs-on: ${{ matrix.platform == 'linux/arm64' && 'ubuntu-24.04-arm' || 'ubuntu-24.04' }}
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          disable-sudo: true
          egress-policy: audit
      - name: Prepare platform pair
        id: prep
        run: |
          platform="${{ matrix.platform }}"
          platform_pair=$(printf '%s' "$platform" | tr '/' '-')
          echo "platform_pair=$platform_pair" >> $GITHUB_OUTPUT
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          ref: ${{ env.branch }}
          persist-credentials: false
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1
      - name: Login to GitHub Container Registry
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3.5.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f # v5.8.0
        with:
          images: |
            name=ghcr.io/${{ env.IMAGE_NAME }}
          flavor: ${{ matrix.variant == 'alpine' && 'suffix=-alpine,onlatest=true' || '' }}
          tags: |
            type=schedule
            type=ref,event=branch
            type=edge
        env:
          DOCKER_METADATA_ANNOTATIONS_LEVELS: manifest,index
      - name: Get Git commit timestamp
        run: echo "GIT_TIMESTAMP=$(git log -1 --pretty=%ct)" >> $GITHUB_ENV
      - name: Set variant build args
        run: |
          if [ "${{ matrix.variant }}" = "alpine" ]; then
            echo "BASE_IMAGE_TYPE=alpine" >> $GITHUB_ENV
          else
            echo "BASE_IMAGE_TYPE=ubuntu-chiseled" >> $GITHUB_ENV
          fi
      - name: Build and push by digest
        id: build
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
        with:
          context: .
          file: src/Distroless.HealthChecks/Dockerfile
          target: final
          platforms: ${{ matrix.platform }}
          build-args: |
            BASE_IMAGE_TYPE=${{ env.BASE_IMAGE_TYPE }}
          provenance: mode=max
          sbom: true
          outputs: type=image,push-by-digest=true,name-canonical=true,push=true
          tags: ghcr.io/${{ env.IMAGE_NAME }}
          labels: ${{ steps.meta.outputs.labels }}
        env:
          SOURCE_DATE_EPOCH: ${{ env.GIT_TIMESTAMP }}
      - name: Attest GHCR
        uses: actions/attest-build-provenance@e8998f949152b193b063cb0ec769d69d929409be # v2.4.0
        with:
          subject-name: ghcr.io/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.build.outputs.digest }}
          push-to-registry: false
      - name: Inspect attestations
        run: |
          echo "Inspecting SBOM and provenance for ${{ matrix.variant }} image digest: ${{ steps.build.outputs.digest }}"
          docker buildx imagetools inspect ghcr.io/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}
      - name: Export digest
        run: |
          mkdir -p ${{ runner.temp }}/digests-${{ matrix.variant }}
          digest="${{ steps.build.outputs.digest }}"
          touch "${{ runner.temp }}/digests-${{ matrix.variant }}/${digest#sha256:}"
      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ matrix.variant }}-${{ steps.prep.outputs.platform_pair }}
          path: ${{ runner.temp }}/digests-${{ matrix.variant }}/*
          if-no-files-found: error
          retention-days: 1


  merge:
    name: Merge manifests and tag (${{ matrix.variant }})
    needs: [ build-native ]
    runs-on: ubuntu-24.04-arm
    strategy:
      fail-fast: false
      matrix:
        variant: [ ubuntu-chiseled, alpine ]
    environment: Nightly
    permissions:
      contents: read
      packages: write
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          disable-sudo: true
          egress-policy: audit
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          ref: ${{ env.branch }}
          persist-credentials: false
      - name: Login to GitHub Container Registry
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3.5.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f # v5.8.0
        with:
          images: |
            name=ghcr.io/${{ env.IMAGE_NAME }}
          flavor: ${{ matrix.variant == 'alpine' && 'suffix=-alpine,onlatest=true' || '' }}
          tags: |
            type=schedule
            type=ref,event=branch
            type=edge
        env:
          DOCKER_METADATA_ANNOTATIONS_LEVELS: manifest,index

      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: ${{ runner.temp }}/digests-${{ matrix.variant }}
          pattern: digests-${{ matrix.variant }}-*
          merge-multiple: true
      - name: Create manifest list and push
        working-directory: ${{ runner.temp }}/digests-${{ matrix.variant }}
        env:
          DOCKER_METADATA_OUTPUT_JSON: ${{ steps.meta.outputs.json }}
        run: |
          if [ -n "$(ls -A)" ]; then
            docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
              $(printf 'ghcr.io/${{ env.IMAGE_NAME }}@sha256:%s ' *)
          else
            echo "No digests found for variant '${{ matrix.variant }}'; skipping manifest create."
          fi
      - name: Inspect image
        run: |
          if [ -n "$(ls -A \"${{ runner.temp }}/digests-${{ matrix.variant }}\")" ]; then
            docker buildx imagetools inspect ghcr.io/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
          fi
