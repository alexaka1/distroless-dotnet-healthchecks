name: Nightly build
on:
  # Nightly via cron
  schedule:
    - cron: '0 0 * * *'
  # Allow running on-demand from the GitHub UI
  workflow_dispatch:
    inputs:
      force:
        description: Force run even if current commit already published
        required: false
        type: boolean
        default: false

concurrency:
  group: ${{ github.workflow }}

permissions:
  contents: read

env:
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  

jobs:
  plan-publish:
    name: Plan publish set
    if: ${{ github.event_name != 'schedule' || github.ref_name == 'main' }}
    outputs:
      should-run: ${{ steps.result.outputs.should-run }}
    permissions:
      contents: read
      packages: read
    runs-on: ubuntu-24.04-arm
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          disable-sudo: true
          egress-policy: audit
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false
      - name: Compute publish list
        id: compute
        env:
          FORCE: ${{ inputs.force }}
        run: |
          set -euo pipefail
          if [ "${{ github.event_name }}" = "schedule" ]; then
            PUBLISH_TAG=nightly
          else
            PUBLISH_TAG='${{ github.ref_name }}'
          fi
          IMAGES=(
            "ghcr.io/${{ github.repository_owner }}/nightly/distroless-dotnet-healthchecks"
          )
          mkdir -p "$RUNNER_TEMP/publish-plan"
          : > "$RUNNER_TEMP/publish-plan/images.txt"
          if [ "${FORCE}" = "true" ]; then
            printf "%s\n" "${IMAGES[@]}" > "$RUNNER_TEMP/publish-plan/images.txt"
            echo "Force publish requested; marking all images."
            exit 0
          fi
          CURRENT_HASH=$(git rev-parse HEAD)
          for repo in "${IMAGES[@]}"; do
            name="$repo:$PUBLISH_TAG"
            if ! docker pull -q "$name" >/dev/null 2>&1; then
              echo "$repo" >> "$RUNNER_TEMP/publish-plan/images.txt"
              continue
            fi
            rev=$(docker inspect --format '{{ index .Config.Labels "org.opencontainers.image.revision" }}' "$name" 2>/dev/null || true)
            if [ -z "$rev" ] || [ "$rev" != "$CURRENT_HASH" ]; then
              echo "$repo" >> "$RUNNER_TEMP/publish-plan/images.txt"
            fi
          done
          echo "Plan:"; cat "$RUNNER_TEMP/publish-plan/images.txt" || true
      - name: Upload publish plan
        uses: actions/upload-artifact@v4
        with:
          name: publish-plan
          path: ${{ runner.temp }}/publish-plan/images.txt
          if-no-files-found: warn
          retention-days: 1
      - name: Set output
        id: result
        run: |
          if [ -s "$RUNNER_TEMP/publish-plan/images.txt" ]; then
            echo "should-run=true" >> "$GITHUB_OUTPUT"
          else
            echo "should-run=false" >> "$GITHUB_OUTPUT"
          fi
  build-native:
    name: Build native (${{ matrix.variant }} / ${{ matrix.platform }})
    needs: [ plan-publish ]
    if: needs.plan-publish.outputs.should-run == 'true'
    environment: Nightly
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    strategy:
      fail-fast: false
    # Explicit include to attach image + dockerfile to each combo
      matrix:
        variant: [ ubuntu-chiseled, alpine ]
        platform: [ linux/amd64, linux/arm64 ]
        image: 
          - ghcr.io/${{ github.repository_owner }}/nightly/distroless-dotnet-healthchecks     
        include:
          - image: ghcr.io/${{ github.repository_owner }}/nightly/distroless-dotnet-healthchecks
            dockerfile: src/Distroless.HealthChecks/Dockerfile
            target: final
    runs-on: ${{ matrix.platform == 'linux/arm64' && 'ubuntu-24.04-arm' || 'ubuntu-24.04' }}
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          disable-sudo: true
          egress-policy: audit
      - name: Prepare platform pair
        id: prep
        run: |
          platform="${{ matrix.platform }}"
          platform_pair=$(printf '%s' "$platform" | tr '/' '-')
          echo "platform_pair=$platform_pair" >> $GITHUB_OUTPUT
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1
      - name: Login to GitHub Container Registry
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3.5.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Download publish plan
        uses: actions/download-artifact@v4
        with:
          name: publish-plan
          path: ${{ runner.temp }}/publish-plan
      - name: Filter by publish plan
        id: plan
        run: |
          set -euo pipefail
          if grep -Fxq '${{ matrix.image }}' '${{ runner.temp }}/publish-plan/images.txt'; then
            echo "publish=true" >> "$GITHUB_OUTPUT"
          else
            echo "publish=false" >> "$GITHUB_OUTPUT"
          fi
      - name: Docker meta
        if: steps.plan.outputs.publish == 'true'
        id: meta
        uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f # v5.8.0
        with:
          images: |
            name=${{ matrix.image }}
          flavor: ${{ matrix.variant == 'alpine' && 'suffix=-alpine,onlatest=true' || '' }}
          tags: |
            type=schedule
            type=ref,event=branch
            type=edge
        env:
          DOCKER_METADATA_ANNOTATIONS_LEVELS: manifest,index
      - name: Get Git commit timestamp
        run: echo "GIT_TIMESTAMP=$(git log -1 --pretty=%ct)" >> $GITHUB_ENV
      - name: Set variant build args
        run: |
          if [ "${{ matrix.variant }}" = "alpine" ]; then
            echo "BASE_IMAGE_TYPE=alpine" >> $GITHUB_ENV
          else
            echo "BASE_IMAGE_TYPE=ubuntu-chiseled" >> $GITHUB_ENV
          fi
      - name: Build and push by digest
        if: steps.plan.outputs.publish == 'true'
        id: build
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
        with:
          context: .
          file: ${{ matrix.dockerfile }}
          target: ${{ matrix.target }}
          platforms: ${{ matrix.platform }}
          build-args: |
            BASE_IMAGE_TYPE=${{ env.BASE_IMAGE_TYPE }}
          provenance: mode=max
          sbom: true
          outputs: type=image,push-by-digest=true,name-canonical=true,push=true
          tags: ${{ matrix.image }}
          labels: ${{ steps.meta.outputs.labels }}
        env:
          SOURCE_DATE_EPOCH: ${{ env.GIT_TIMESTAMP }}
      - name: Attest GHCR
        if: steps.plan.outputs.publish == 'true'
        uses: actions/attest-build-provenance@e8998f949152b193b063cb0ec769d69d929409be # v2.4.0
        with:
          subject-name: ${{ matrix.image }}
          subject-digest: ${{ steps.build.outputs.digest }}
          push-to-registry: false
      - name: Inspect attestations
        if: steps.plan.outputs.publish == 'true'
        run: |
          echo "Inspecting SBOM and provenance for ${{ matrix.variant }} image digest: ${{ steps.build.outputs.digest }}"
          docker buildx imagetools inspect ${{ matrix.image }}@${{ steps.build.outputs.digest }}
      - name: Export digest
        if: steps.plan.outputs.publish == 'true'
        run: |
          mkdir -p ${{ runner.temp }}/digests-${{ matrix.variant }}
          digest="${{ steps.build.outputs.digest }}"
          touch "${{ runner.temp }}/digests-${{ matrix.variant }}/${digest#sha256:}"
      - name: Upload digest
        if: steps.plan.outputs.publish == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ matrix.variant }}-${{ steps.prep.outputs.platform_pair }}
          path: ${{ runner.temp }}/digests-${{ matrix.variant }}/*
          if-no-files-found: error
          retention-days: 1


  merge:
    name: Merge manifests and tag (${{ matrix.variant }})
    needs: [ plan-publish, build-native ]
    if: needs.plan-publish.outputs.should-run == 'true'
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        variant: [ ubuntu-chiseled, alpine ]
        include:
          - image: ghcr.io/${{ github.repository_owner }}/nightly/distroless-dotnet-healthchecks
    environment: Nightly
    permissions:
      contents: read
      packages: write
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          disable-sudo: true
          egress-policy: audit
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false
      - name: Login to GitHub Container Registry
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3.5.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1
      - name: Download publish plan
        uses: actions/download-artifact@v4
        with:
          name: publish-plan
          path: ${{ runner.temp }}/publish-plan
      - name: Filter by publish plan
        id: plan
        run: |
          set -euo pipefail
          if grep -Fxq '${{ matrix.image }}' '${{ runner.temp }}/publish-plan/images.txt'; then
            echo "publish=true" >> "$GITHUB_OUTPUT"
          else
            echo "publish=false" >> "$GITHUB_OUTPUT"
          fi
      - name: Docker meta
        if: steps.plan.outputs.publish == 'true'
        id: meta
        uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f # v5.8.0
        with:
          images: |
            name=${{ matrix.image }}
          flavor: ${{ matrix.variant == 'alpine' && 'suffix=-alpine,onlatest=true' || '' }}
          tags: |
            type=schedule
            type=ref,event=branch
            type=edge
        env:
          DOCKER_METADATA_ANNOTATIONS_LEVELS: manifest,index
      - name: Download digests
        if: steps.plan.outputs.publish == 'true'
        uses: actions/download-artifact@v4
        with:
          path: ${{ runner.temp }}/digests-${{ matrix.variant }}
          pattern: digests-${{ matrix.variant }}-*
          merge-multiple: true
      - name: Create manifest list and push
        if: steps.plan.outputs.publish == 'true'
        working-directory: ${{ runner.temp }}/digests-${{ matrix.variant }}
        env:
          DOCKER_METADATA_OUTPUT_JSON: ${{ steps.meta.outputs.json }}
        run: |
          if [ -n "$(ls -A)" ]; then
            docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
              $(printf '${{ matrix.image }}@sha256:%s ' *)
          else
            echo "No digests found for variant '${{ matrix.variant }}'; skipping manifest create."
          fi
      - name: Inspect image
        if: steps.plan.outputs.publish == 'true'
        run: |
          DIR="${{ runner.temp }}/digests-${{ matrix.variant }}"
          if [ -d "$DIR" ] && [ "$(ls -A "$DIR" 2>/dev/null | wc -l)" -gt 0 ]; then
            docker buildx imagetools inspect ${{ matrix.image }}:${{ steps.meta.outputs.version }}
          else
            echo "No digests directory or empty for variant '${{ matrix.variant }}'; skipping inspect."
          fi
