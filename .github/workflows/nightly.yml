name: Nightly build
on:
  schedule:
    - cron: '0 0 * * *'

concurrency:
  group: ${{ github.workflow }}

permissions:
  contents: read

env:
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  IMAGE_NAME: ${{ github.repository_owner }}/nightly/distroless-dotnet-healthchecks
  branch: main

jobs:
  check-run:
    outputs:
      should-run: ${{ steps.check_commit.outputs.should-run }}
    permissions:
      contents: read
      packages: read
    runs-on: ubuntu-latest
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          disable-sudo: true
          egress-policy: audit
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          ref: ${{ env.branch }}
          persist-credentials: false
      - name: Check if last commit had a run
        id: check_commit
        continue-on-error: true
        run: |
          set -euo pipefail
          CURRENT_HASH=$(git rev-parse HEAD)
          IMAGE_NAME=ghcr.io/${{ env.IMAGE_NAME }}:nightly
          if ! docker pull -q "$IMAGE_NAME" >/dev/null 2>&1; then
            echo "::notice::Image $IMAGE_NAME not found in registry."
            exit 0
          fi
          IMAGE_HASH=$(docker inspect \
          --format '{{ index .Config.Labels "org.opencontainers.image.revision" }}' \
          "$IMAGE_NAME" 2>/dev/null || echo "")
          
          if [[ -z "$IMAGE_HASH" ]]; then
            echo "Image $IMAGE_NAME has no org.opencontainers.image.revision label."
            exit 0
          fi  
          echo "Current Git hash: $CURRENT_HASH"
          echo "Image hash:       $IMAGE_HASH"
            
          if [[ "$IMAGE_HASH" == "$CURRENT_HASH" ]]; then
            echo "::notice::This commit ($CURRENT_HASH) has already been published. Skipping."
            echo "should-run=false" >> $GITHUB_OUTPUT
          else
            echo "Image does not match current commit. Safe to build/push."
            echo "should-run=true" >> $GITHUB_OUTPUT
          fi
  build:
    needs: [ check-run ]
    if: needs.check-run.outputs.should-run == 'true'
    environment: Nightly
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    runs-on: ubuntu-latest
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          disable-sudo: true
          egress-policy: audit
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          ref: ${{ env.branch }}
          persist-credentials: false
      - name: Set up QEMU
        uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3.6.0
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1
      - name: Login to GitHub Container Registry
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3.5.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f # v5.8.0
        with:
          images: |
            name=ghcr.io/${{ env.IMAGE_NAME }}
          tags: |
            type=schedule
            type=ref,event=branch
            type=edge
        env:
          DOCKER_METADATA_ANNOTATIONS_LEVELS: manifest,index
      - name: Get Git commit timestamps
        run: echo "GIT_TIMESTAMP=$(git log -1 --pretty=%ct)" >> $GITHUB_ENV
      - name: Build and push
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
        id: docker_build
        with:
          context: .
          file: src/Distroless.HealthChecks/Dockerfile
          target: final
          platforms: linux/amd64,linux/amd64/v2,linux/amd64/v3,linux/arm64,linux/arm64/v8
          provenance: mode=max
          sbom: true
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          annotations: ${{ steps.meta.outputs.annotations }}
        env:
          SOURCE_DATE_EPOCH: ${{ env.GIT_TIMESTAMP }}
      - name: Attest GitHub Container Registry
        uses: actions/attest-build-provenance@e8998f949152b193b063cb0ec769d69d929409be # v2.4.0
        with:
          subject-name: ghcr.io/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.docker_build.outputs.digest }}
          push-to-registry: false
